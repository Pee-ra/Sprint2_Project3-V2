import { useState } from "react";
import { Button } from "../components/ui/button.jsx";
import { Card } from "../components/ui/card.jsx";
import { Badge } from "../components/ui/badge.jsx";

import { SearchAndFilter } from "../components/SearchAndFilter.jsx";
import { SimpleStatCard } from "../components/SimpleStatCard.jsx";
import { EmptyState } from "../components/EmptyState.jsx";
import { CustomerModal } from "../components/CustomerModal.jsx";
import { 
  customersData as initialCustomers,
  customerStatusConfig,
  getCustomerStatusColor,
  getCustomerStatusLabel,
  calculateCustomerStats,
  filterCustomers
} from "../data/admindata.js";

export function AdminCustomers() {
  const [customers, setCustomers] = useState(initialCustomers);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  const [selectedCustomer, setSelectedCustomer] = useState(null);

  const updateCustomerStatus = (customerId, newStatus) => {
    setCustomers(customers.map(customer =>
      customer.id === customerId ? { ...customer, status: newStatus } : customer
    ));
  };

  const filteredCustomers = filterCustomers(customers, searchTerm, statusFilter);
  const stats = calculateCustomerStats(customers);

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h2 className="text-2xl font-semibold mb-2">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤</h2>
        <p className="text-muted-foreground">
          ‡∏î‡∏π‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        </p>
      </div>

      {/* Filters */}
      <SearchAndFilter
        searchTerm={searchTerm}
        setSearchTerm={setSearchTerm}
        statusFilter={statusFilter}
        setStatusFilter={setStatusFilter}
        searchPlaceholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠ ‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£..."
        statusOptions={customerStatusConfig.options}
      />

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <SimpleStatCard 
          title="‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" 
          value={stats.total} 
          color="text-primary" 
        />
        <SimpleStatCard 
          title="‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà" 
          value={stats.new} 
          color="text-blue-600" 
        />
        <SimpleStatCard 
          title="‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥" 
          value={stats.active} 
          color="text-green-600" 
        />
        <SimpleStatCard 
          title="‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ VIP" 
          value={stats.vip} 
          color="text-purple-600" 
        />
        <SimpleStatCard 
          title="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°" 
          value={stats.totalRevenue} 
          color="text-orange-600" 
        />
      </div>

      {/* Customers List */}
      <div className="space-y-4">
        {filteredCustomers.map((customer) => (
          <Card key={customer.id} className="p-6">
            <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
              <div className="flex-1 space-y-3">
                <div className="flex items-center gap-3">
                  <h3 className="font-semibold">{customer.name}</h3>
                  <Badge className={getCustomerStatusColor(customer.status)}>
                    {getCustomerStatusLabel(customer.status)}
                  </Badge>
                  {customer.subscription !== "‡πÑ‡∏°‡πà‡∏°‡∏µ" && (
                    <Badge variant="outline">
                      {customer.subscription}
                    </Badge>
                  )}
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <p className="text-sm text-muted-foreground">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</p>
                    <p className="text-sm">{customer.email}</p>
                    <p className="text-sm">{customer.phone}</p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
                    <p className="text-sm">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠: {customer.totalOrders} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>
                    <p className="text-sm">‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢: ‡∏ø{customer.totalSpent.toLocaleString()}</p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</p>
                    <p className="text-sm">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: {customer.joinDate}</p>
                    <p className="text-sm">‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {customer.lastOrder}</p>
                  </div>
                </div>

                <div>
                  <p className="text-sm text-muted-foreground">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</p>
                  <p className="text-sm">{customer.address}</p>
                </div>
              </div>

              <div className="flex flex-col gap-2 lg:min-w-[200px]">
                <select
                  value={customer.status}
                  onChange={(e) => updateCustomerStatus(customer.id, e.target.value)}
                  className="px-3 py-2 border border-border rounded-lg bg-input-background text-sm"
                >
                  {customerStatusConfig.options.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
                
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="w-full"
                  onClick={() => setSelectedCustomer(customer)}
                >
                  ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
                </Button>
                
                <Button variant="outline" size="sm" className="w-full">
                  ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
                </Button>
              </div>
            </div>
          </Card>
        ))}
      </div>

      {filteredCustomers.length === 0 && (
        <EmptyState
          icon="üë•"
          title="‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
          description="‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á"
        />
      )}

      {/* Customer Detail Modal */}
      <CustomerModal 
        customer={selectedCustomer}
        onClose={() => setSelectedCustomer(null)}
      />
    </div>
  );
}