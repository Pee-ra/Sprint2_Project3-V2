import { useState } from "react";
import { Button } from "../components/ui/button.jsx";
import { Card } from "../components/ui/card.jsx";
import { Badge } from "../components/ui/badge.jsx";
import { Input } from "../components/ui/input.jsx";
import { myOrdershistory } from "../data/services.js";
import Lottie from "lottie-react";
import wash from "../components/lottie/wash.json";


export function MyOrders() {
  const [orders, setOrders] = useState(myOrdershistory);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
  const [selectedOrder, setSelectedOrder] = useState(null);

  const getStatusColor = (status) => {
    switch (status) {
      case "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤":
        return "bg-yellow-100 text-yellow-800";
      case "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
        return "bg-blue-100 text-blue-800";
      case "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô":
        return "bg-green-100 text-green-800";
      case "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤":
        return "üì¶";
      case "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£":
        return "üîÑ";
      case "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô":
        return "‚úÖ";
      case "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å":
        return "‚ùå";
      default:
        return "üìã";
    }
  };

  const filteredOrders = orders.filter(order => {
    const matchesSearch = order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         order.service.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" || order.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const stats = {
    total: orders.length,
    pending: orders.filter(o => o.status === "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤").length,
    inProgress: orders.filter(o => o.status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£").length,
    completed: orders.filter(o => o.status === "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô").length,
    totalSpent: orders
      .filter(o => o.status === "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
      .reduce((sum, o) => sum + o.amount, 0)
  };

  const cancelOrder = (orderId) => {
    if (window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ?")) {
      setOrders(orders.map(order =>
        order.id === orderId ? { ...order, status: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" } : order
      ));
    }
  };

  const reorder = (order) => {
    const newOrder = {
      ...order,
      id: `ORD-2024-${String(orders.length + 1).padStart(3, '0')}`,
      status: "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤",
      orderDate: new Date().toISOString().split('T')[0],
      pickupDate: "",
      deliveryDate: ""
    };
    setOrders([newOrder, ...orders]);
    alert("‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
  };

  return (
    <div className="space-y-6 relative">
      {/* Header */}
      <div>
        <h2 className="text-2xl font-semibold mb-2">‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h2> 
        <p className="text-muted-foreground">
          ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
        </p>
        <Lottie animationData={wash} className=" absolute -top-12 left-60" style={{width: "160px", height: "160px"}}/>
      </div>

      {/* Stats Cards */}
      {/* <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card className="p-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-primary mb-1">
              {stats.total}
            </div>
            <div className="text-sm text-muted-foreground">‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
          </div>
        </Card>
        <Card className="p-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-yellow-600 mb-1">
              {stats.pending}
            </div>
            <div className="text-sm text-muted-foreground">‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤</div>
          </div>
        </Card>
        <Card className="p-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600 mb-1">
              {stats.inProgress}
            </div>
            <div className="text-sm text-muted-foreground">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</div>
          </div>
        </Card>
        <Card className="p-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600 mb-1">
              {stats.completed}
            </div>
            <div className="text-sm text-muted-foreground">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</div>
          </div>
        </Card>
        <Card className="p-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-600 mb-1">
              ‡∏ø{stats.totalSpent.toLocaleString()}
            </div>
            <div className="text-sm text-muted-foreground">‡∏¢‡∏≠‡∏î‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏£‡∏ß‡∏°</div>
          </div>
        </Card>
      </div> */}

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="flex-1">
          <Input
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full"
          />
        </div>
        <div className="w-full sm:w-48">
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
            className="w-full px-3 py-2 border border-border rounded-lg bg-input-background"
          >
            <option value="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏ó‡∏∏‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</option>
            <option value="‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤">‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤</option>
            <option value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</option>
            <option value="‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</option>
            <option value="‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</option>
          </select>
        </div>
      </div>

      {/* Orders List */}
      <div className="space-y-4">
        {filteredOrders.map((order) => (
          <Card key={order.id} className="p-6">
            <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
              <div className="flex-1 space-y-3">
                <div className="flex items-center gap-3">
                  <span className="text-2xl">{getStatusIcon(order.status)}</span>
                  <div>
                    <h3 className="font-semibold">{order.id}</h3>
                    <p className="text-sm text-muted-foreground">
                      ‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {order.orderDate}
                    </p>
                  </div>
                  <Badge className={getStatusColor(order.status)}>
                    {order.status}
                  </Badge>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-muted-foreground">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£</p>
                    <p className="font-medium">{order.service}</p>
                    <p className="text-sm text-muted-foreground">
                      ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø{order.amount.toLocaleString()}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-muted-foreground">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£</p>
                    <p className="text-sm">‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤: {order.pickupDate || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"}</p>
                    <p className="text-sm">‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô: {order.deliveryDate || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"}</p>
                  </div>
                </div>

                <div>
                  <p className="text-sm text-muted-foreground">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                  <p className="text-sm">{order.items.join(", ")}</p>
                </div>

                {order.specialInstructions && (
                  <div>
                    <p className="text-sm text-muted-foreground">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©</p>
                    <p className="text-sm">{order.specialInstructions}</p>
                  </div>
                )}
              </div>

              <div className="flex flex-col gap-2 lg:min-w-[180px]">
                <Button
                  variant="outline"
                  size="sm"
                  className="w-full"
                  onClick={() => setSelectedOrder(order)}
                >
                  ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
                </Button>

                {order.status === "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤" && (
                  <Button
                    variant="destructive"
                    size="sm"
                    className="w-full"
                    onClick={() => cancelOrder(order.id)}
                  >
                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                  </Button>
                )}

                {order.status === "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" && (
                  <Button
                    variant="default"
                    size="sm"
                    className="w-full"
                    onClick={() => reorder(order)}
                  >
                    ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ã‡πâ‡∏≥
                  </Button>
                )}

                {(order.status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" || order.status === "‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤") && (
                  <Button variant="outline" size="sm" className="w-full">
                    ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                  </Button>
                )}
              </div>
            </div>
          </Card>
        ))}
      </div>

      {filteredOrders.length === 0 && (
        <div className="text-center py-12">
          <div className="text-4xl mb-4">üì¶</div>
          <h3 className="text-lg font-semibold mb-2">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
          <p className="text-muted-foreground mb-4">
            ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
          </p>
          <Button>‡∏à‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà</Button>
        </div>
      )}

      {/* Order Detail Modal */}
      {selectedOrder && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <Card className="max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div className="p-6 space-y-6">
              <div className="flex justify-between items-start">
                <h3 className="text-xl font-semibold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h3>
                <Button
                  variant="outline"
                  onClick={() => setSelectedOrder(null)}
                >
                  ‡∏õ‡∏¥‡∏î
                </Button>
              </div>

              <div className="space-y-4">
                <div className="flex items-center gap-3">
                  <span className="text-3xl">{getStatusIcon(selectedOrder.status)}</span>
                  <div>
                    <h4 className="font-semibold text-lg">{selectedOrder.id}</h4>
                    <Badge className={getStatusColor(selectedOrder.status)}>
                      {selectedOrder.status}
                    </Badge>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h5 className="font-medium mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</h5>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:</span>
                        <span>{selectedOrder.service}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô:</span>
                        <span>‡∏ø{selectedOrder.amount.toLocaleString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á:</span>
                        <span>{selectedOrder.orderDate}</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h5 className="font-medium mb-2">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£</h5>
                    <div className="space-y-1 text-sm">
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡πâ‡∏≤:</span>
                        <span>{selectedOrder.pickupDate || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-muted-foreground">‡∏ß‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô:</span>
                        <span>{selectedOrder.deliveryDate || "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"}</span>
                      </div>
                    </div>
                  </div>
                </div>

                <div>
                  <h5 className="font-medium mb-2">‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤</h5>
                  <ul className="space-y-1 text-sm">
                    {selectedOrder.items.map((item, index) => (
                      <li key={index} className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-primary rounded-full"></div>
                        {item}
                      </li>
                    ))}
                  </ul>
                </div>

                {selectedOrder.specialInstructions && (
                  <div>
                    <h5 className="font-medium mb-2">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏¥‡πÄ‡∏®‡∏©</h5>
                    <p className="text-sm bg-muted p-3 rounded-lg">
                      {selectedOrder.specialInstructions}
                    </p>
                  </div>
                )}

                {selectedOrder.status === "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£" && (
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h5 className="font-medium mb-2 text-blue-900">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h5>
                    <p className="text-sm text-blue-800">
                      ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å ‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ß‡∏•‡∏≤
                    </p>
                  </div>
                )}

                {selectedOrder.status === "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" && (
                  <div className="bg-green-50 p-4 rounded-lg">
                    <h5 className="font-medium mb-2 text-green-900">‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!</h5>
                    <p className="text-sm text-green-800">
                      ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ã‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                    </p>
                  </div>
                )}
              </div>
            </div>
          </Card>
        </div>
      )}
    </div>
  );
}